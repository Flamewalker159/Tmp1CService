openapi: 3.0.3
info:
  title: TMP Cars service REST API
  version: "1.0"
  description: REST API сервис для интеграции TMP с 1С
  
servers:
  - url: https://localhost:7089
    description: Локальный сервер для тестирования
    
tags:
  - name: Vehicles
    description: Api получения транспорта
  - name: Clients
    description: Api клиента
  - name: Telematics
    description: Api телематических данных
    
paths:
  /api/clients/{clientId}/vehicles/:
    get:
      summary: Получение списка транспортных средств из 1С
      description: Возвращает список транспортных средств, связанных с пользователем, по его идентификатору.
      security:
        - ApiKeyScheme: []
      parameters:
        - $ref: '#/components/parameters/clientId'
      responses:
        200:
          description: Успешный ответ со списком транспортных средств
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleDto'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: '#/components/responses/NotFoundError'
      tags:
        - Vehicles
  /api/clients/{clientId}/vehicles/{vehicleCode1C}:
    put:
      summary: Обновить данные транспортного средства
      description: Обновляет информацию о транспортном средстве в 1С
      parameters:
        - $ref: '#/components/parameters/clientId'
        - $ref: "#/components/parameters/vehicleCode1C"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleUpdateDto"
      responses:
        200:
          description: Данные ТС успешно обновлены
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Данные ТС успешно обновлены"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Vehicles
  /api/clients/:
    post: 
      summary: Создание нового клиента
      description: Регистрирует нового клиента с указанными данными для доступа к 1С.
      security:
        - ApiKeyScheme: []
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/ClientDto'
      responses: 
        201:
          description: Клиент успешно создан
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/UserCreated'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: "#/components/responses/UnauthorizedError"
      tags:
        - Clients
  /api/clients/{clientId}:
    put:
      summary: Обновление данных клиента
      description: Обновляет данные существующего клиента по его идентификатору.
      security:
        - ApiKeyScheme: []
      parameters:
        - $ref: '#/components/parameters/clientId'
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/ClientDto'
      responses: 
        200:
          description: Данные клиента обновлены
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
                    example: "Данные клиента успешно обновлены"
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
      tags: 
        - Clients
    delete:
      summary: Удаление клиента
      description: Удаляет клиента по его идентификатору.
      security:
        - ApiKeyScheme: [ ]
      parameters:
        - $ref: '#/components/parameters/clientId'
      responses:
        204:
          $ref: "#/components/responses/NoContent"
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      tags:
        - Clients
  /api/clients/test:
    post:
      summary: Проверка соединения с сервером 1С
      description: Отправляет запрос на сервер 1С для проверка соединения
      security:
        - ApiKeyScheme: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientDto'
      responses: 
        200:
          description: Ответ от сервера 1С.
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  message: 
                    type: string
                    example: "Соединение установлено."
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      tags:
        - Clients
  /api/clients/{clientId}/telematicsData/{vehicleCode}:
    post:
      summary: Передача телематических данных в 1С
      description: Отправляет телематические данные ТС в систему 1С
      parameters:
        - $ref: "#/components/parameters/clientId"
        - $ref: "#/components/parameters/vehicleCode1C"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TelematicsDataDto"
      responses:
        200:
          description: Данные успешно приняты
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Данные успешно приняты"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
      tags:
        - Telematics
components:
  
  parameters:
    clientId:
      name: clientId
      in: path
      required: true
      schema: 
        type: string
        format: uuid
      description: Идентификатор клиента 1С
      example: "e6be2638-a390-4895-9d30-7d87807ba443"
    vehicleCode1C:
      name: vehicleCode1C
      in: path
      required: true
      description: Код транспортного средства в 1С
      schema:
        type: string
  
  responses:
    NoContent:
      description: Операция выполнена, данные удалены
    BadRequestError:
      description: Некорректный запрос.
      content:
        application/json:
          example: "Error: Bad Request"
    UnauthorizedError:
      description: Ошибка авторизации. API-ключ отсутствует или недействителен.
      content:
        application/json:
          example: "Error: Unauthorized"
    NotFoundError:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "error"
                
  schemas:
    VehicleUpdateDto:
      type: object
      required:
        - licensePlate
        - mass
      properties:
        licensePlate:
          type: string
          description: Государственный номер
          example: "А123ВС 777"
        mass:
          type: integer
          description: Масса автомобиля в кг
          example: 1500
        dimensions:
          type: string
          description: Габариты автомобиля
          example: "4.5 x 1.8 x 1.6 м"
        chassisNumber:
          type: string
          description: Номер шасси
          example: "1234567890"
        engineNumber:
          type: string
          description: Номер двигателя
          example: "EN-98765"
        engineModel:
          type: string
          description: Модель двигателя
          example: "V6 Turbo"
        powerEngineInLs:
          type: integer
          description: Мощность двигателя в лошадиных силах
          example: 300
        powerEngineInKvt:
          type: integer
          description: Мощность двигателя в киловаттах
          example: 220
    VehicleDto:
      type: object
      additionalProperties:
        type: object
        properties:
          name:
            type: string
            nullable: true
          licensePlate:
            type: string
            nullable: true
          vin:
            type: string
            nullable: true
          brand:
            type: string
            nullable: true
          model:
            type: string
            nullable: true
          groupId:
            type: string
            nullable: true
          yearOfIssue:
            type: string
            format: date-time
          mass:
            type: integer
            format: int32
          dimensions:
            type: string
            nullable: true
          ownershipType:
            type: string
            nullable: true
          chassisNumber:
            type: string
            nullable: true
          engineNumber:
            type: string
            nullable: true
          engineModel:
            type: string
            nullable: true
          powerEngineInLs:
            type: string
            nullable: true
          powerEngineInKvt:
            type: string
            nullable: true
      example:
        "000000001":
          name: "кенрекрнр"
          licensePlate: "рнкркркенрк4354"
          vin: "34565645н65"
          brand: "54ее54п54"
          model: "апп5пп554"
          groupId: "5434334апвапав"
          yearOfIssue: "3999-12-07T07:00:00+07:00"
          mass: 455
          dimensions: "апаве4443"
          ownershipType: "4334па34ап"
          chassisNumber: "п344п35п34"
          engineNumber: "3пк5п54п345"
          engineModel: "п34534п34п"
          powerEngineInLs: "433"
          powerEngineInKvt: "4343"
        "000000002":
          name: "ттапртпарр"
          licensePlate: "4535е345435е"
          vin: "54356534е54ен"
          brand: "тпитаититит"
          model: "авпрпвапр"
          groupId: "рнкенекнекнр"
          yearOfIssue: "2025-02-04T07:00:00+07:00"
          mass: 1000
          dimensions: "7 8 6"
          ownershipType: "кенекн"
          chassisNumber: "л7676о7676о"
          engineNumber: "7о6о7"
          engineModel: "7о7о"
          powerEngineInLs: "777"
          powerEngineInKvt: "986"   
    ClientDto:
      type: object
      required:
        - login
        - url1C
      properties:
        login:
          type: string
          minLength: 1
          example: "User1c"
        password:
          type: string
          nullable: true
          example: "qweasd123"
        url1C:
          type: string
          minLength: 1
          example: "http://localhost/InfoBase"
      additionalProperties: false
      
    UserCreated:
      type: object
      properties: 
        id1c:
          type: string
          format: uuid
          example: "e6be2638-a390-4895-9d30-7d87807ba443"
    TelematicsDataDto:
      type: object
      properties:
        gps:
          $ref: "#/components/schemas/GpsDto"
        can:
          $ref: "#/components/schemas/CanDto"
      required:
        - gps
        - can
    GpsDto:
      type: object
      description: Данные GPS или ГЛОНАСС
      properties:
        longitude:
          type: integer
          format: int64
          description: Долгота в угловых секундах
        latitude:
          type: integer
          format: int64
          description: Широта в угловых секундах
        altitude:
          type: integer
          description: Высота
        course:
          type: integer
          description: Курс (градусы)
        satellites_amount:
          type: integer
          description: Число найденных спутников
        validity:
          type: integer
          description: Валидность навигационных данных (0 - не валидны, 1 - валидны)
        gnss_timestamp:
          type: integer
          format: int64
          description: Дата-время по спутнику (timestamp)
        timestamp:
          type: integer
          format: int64
          description: Дата-время (timestamp) формирования сообщения бортовым устройством
        speed:
          type: integer
          description: Скорость
        acc_voltage:
          type: integer
          description: Напряжение батареи бортовой сети
        ignition_status:
          type: boolean
          description: Статус включенного зажигания
        power_status:
          type: boolean
          description: Статус исправности батареи
        errorCodes:
          type: array
          description: Коды ошибок (лампы неисправностей)
          items:
            $ref: "#/components/schemas/ErrorCodeDto"
      required:
        - longitude
        - latitude
        - timestamp
    ErrorCodeDto:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор лампы
        state:
          type: boolean
          description: Статус лампы (горит/погашена)
        errorCodes:
          type: array
          description: Список кодов неисправностей
          items:
            type: string
          nullable: true
    CanDto:
      type: object
      description: Данные CAN-шины
      properties:
        speed:
          type: integer
          description: Скорость
        remaining_mileage:
          type: integer
          description: Пробег до сервисного обслуживания
        fuel_level:
          type: integer
          description: Уровень топлива
        coolant_temp:
          type: integer
          description: Температура охлаждающей жидкости
        onboard_power_voltage:
          type: integer
          description: Напряжение бортовой сети
        max_rpm:
          type: integer
          description: Максимальные обороты двигателя
      required:
        - speed
        - fuel_level
  securitySchemes:
    ApiKeyScheme:
      type: apiKey
      description: API-ключ для авторизации запросов
      name: X-API-KEY
      in: header     